// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/diarikom/running-app/running-app-api/internal/api/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/diarikom/running-app/running-app-api/internal/api/model"
)

// CreditService is an autogenerated mock type for the CreditService type
type CreditService struct {
	mock.Mock
}

// Charge provides a mock function with given fields: opt
func (_m *CreditService) Charge(opt dto.CreditChargeOpt) (string, error) {
	ret := _m.Called(opt)

	var r0 string
	if rf, ok := ret.Get(0).(func(dto.CreditChargeOpt) string); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreditChargeOpt) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChargeAmount provides a mock function with given fields: opt
func (_m *CreditService) CheckChargeAmount(opt dto.CreditChargeOpt) (int, error) {
	ret := _m.Called(opt)

	var r0 int
	if rf, ok := ret.Get(0).(func(dto.CreditChargeOpt) int); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreditChargeOpt) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBalance provides a mock function with given fields: userId
func (_m *CreditService) GetUserBalance(userId string) (*dto.UserCreditBalanceResp, error) {
	ret := _m.Called(userId)

	var r0 *dto.UserCreditBalanceResp
	if rf, ok := ret.Get(0).(func(string) *dto.UserCreditBalanceResp); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserCreditBalanceResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWallet provides a mock function with given fields: userId
func (_m *CreditService) GetUserWallet(userId string) (*model.UserCreditWallet, error) {
	ret := _m.Called(userId)

	var r0 *model.UserCreditWallet
	if rf, ok := ret.Get(0).(func(string) *model.UserCreditWallet); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserCreditWallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPendingTrx provides a mock function with given fields: opt
func (_m *CreditService) InsertPendingTrx(opt dto.CreditTrxOpt) (string, error) {
	ret := _m.Called(opt)

	var r0 string
	if rf, ok := ret.Get(0).(func(dto.CreditTrxOpt) string); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreditTrxOpt) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SettlePendingTrx provides a mock function with given fields: opt
func (_m *CreditService) SettlePendingTrx(opt dto.CreditSettleOpt) error {
	ret := _m.Called(opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.CreditSettleOpt) error); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
