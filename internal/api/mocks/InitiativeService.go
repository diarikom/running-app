// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/diarikom/running-app/running-app-api/internal/api/dto"
	mock "github.com/stretchr/testify/mock"
)

// InitiativeService is an autogenerated mock type for the InitiativeService type
type InitiativeService struct {
	mock.Mock
}

// Donate provides a mock function with given fields: opt
func (_m *InitiativeService) Donate(opt dto.DonateReq) (*dto.DonateResp, error) {
	ret := _m.Called(opt)

	var r0 *dto.DonateResp
	if rf, ok := ret.Get(0).(func(dto.DonateReq) *dto.DonateResp); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.DonateResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.DonateReq) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: opt
func (_m *InitiativeService) List(opt dto.PageReq) ([]dto.InitiativeResp, error) {
	ret := _m.Called(opt)

	var r0 []dto.InitiativeResp
	if rf, ok := ret.Get(0).(func(dto.PageReq) []dto.InitiativeResp); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.InitiativeResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.PageReq) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserDonation provides a mock function with given fields: opt
func (_m *InitiativeService) ListUserDonation(opt dto.UserResourcesReq) ([]dto.DonationHistoryResp, error) {
	ret := _m.Called(opt)

	var r0 []dto.DonationHistoryResp
	if rf, ok := ret.Get(0).(func(dto.UserResourcesReq) []dto.DonationHistoryResp); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.DonationHistoryResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.UserResourcesReq) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
