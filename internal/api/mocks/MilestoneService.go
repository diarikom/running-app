// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/diarikom/running-app/running-app-api/internal/api/dto"
	mock "github.com/stretchr/testify/mock"
)

// MilestoneService is an autogenerated mock type for the MilestoneService type
type MilestoneService struct {
	mock.Mock
}

// CheckChallengeAchieve provides a mock function with given fields: req
func (_m *MilestoneService) CheckChallengeAchieve(req dto.UserChallengeReq) (*dto.MilestoneAchievementResp, error) {
	ret := _m.Called(req)

	var r0 *dto.MilestoneAchievementResp
	if rf, ok := ret.Get(0).(func(dto.UserChallengeReq) *dto.MilestoneAchievementResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MilestoneAchievementResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.UserChallengeReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimCredit provides a mock function with given fields: opt
func (_m *MilestoneService) ClaimCredit(opt dto.UserChallengeReq) (*dto.ChallengeRewardClaimResp, error) {
	ret := _m.Called(opt)

	var r0 *dto.ChallengeRewardClaimResp
	if rf, ok := ret.Get(0).(func(dto.UserChallengeReq) *dto.ChallengeRewardClaimResp); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ChallengeRewardClaimResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.UserChallengeReq) error); ok {
		r1 = rf(opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Current provides a mock function with given fields: userID
func (_m *MilestoneService) Current(userID string) (*dto.MilestoneResp, error) {
	ret := _m.Called(userID)

	var r0 *dto.MilestoneResp
	if rf, ok := ret.Get(0).(func(string) *dto.MilestoneResp); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.MilestoneResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadMilestone provides a mock function with given fields:
func (_m *MilestoneService) LoadMilestone() {
	_m.Called()
}

// TriggerCheckChallengeAchieved provides a mock function with given fields: req
func (_m *MilestoneService) TriggerCheckChallengeAchieved(req dto.UserChallengeReq) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.UserChallengeReq) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserChallengeAchievement provides a mock function with given fields: opt
func (_m *MilestoneService) UpdateUserChallengeAchievement(opt dto.UserChallengeReq) error {
	ret := _m.Called(opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.UserChallengeReq) error); ok {
		r0 = rf(opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
