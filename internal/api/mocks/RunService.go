// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/diarikom/running-app/running-app-api/internal/api/dto"
	mock "github.com/stretchr/testify/mock"
)

// RunService is an autogenerated mock type for the RunService type
type RunService struct {
	mock.Mock
}

// GetRunSessionHistory provides a mock function with given fields: userId, skip, limit
func (_m *RunService) GetRunSessionHistory(userId string, skip int64, limit int8) (*dto.RunSessionHistoryResp, error) {
	ret := _m.Called(userId, skip, limit)

	var r0 *dto.RunSessionHistoryResp
	if rf, ok := ret.Get(0).(func(string, int64, int8) *dto.RunSessionHistoryResp); ok {
		r0 = rf(userId, skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RunSessionHistoryResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, int8) error); ok {
		r1 = rf(userId, skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRunSession provides a mock function with given fields: userId, req
func (_m *RunService) NewRunSession(userId string, req *dto.RunSessionReq) error {
	ret := _m.Called(userId, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *dto.RunSessionReq) error); ok {
		r0 = rf(userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRunSyncStatus provides a mock function with given fields: id, userId, status
func (_m *RunService) UpdateRunSyncStatus(id string, userId string, status int) error {
	ret := _m.Called(id, userId, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(id, userId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
