// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/diarikom/running-app/running-app-api/internal/api/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/diarikom/running-app/running-app-api/internal/api/model"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: req
func (_m *UserService) ChangePassword(req dto.ChangePasswordReq) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.ChangePasswordReq) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProfile provides a mock function with given fields: userId
func (_m *UserService) GetProfile(userId string) (*dto.UserProfileResp, error) {
	ret := _m.Called(userId)

	var r0 *dto.UserProfileResp
	if rf, ok := ret.Get(0).(func(string) *dto.UserProfileResp); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserProfileResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileSnapshot provides a mock function with given fields: userId
func (_m *UserService) GetProfileSnapshot(userId string) (*model.UserSnapshot, error) {
	ret := _m.Called(userId)

	var r0 *model.UserSnapshot
	if rf, ok := ret.Get(0).(func(string) *model.UserSnapshot); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEmailExists provides a mock function with given fields: email
func (_m *UserService) IsEmailExists(email string) (interface{}, error) {
	ret := _m.Called(email)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: req
func (_m *UserService) Login(req dto.UserLoginReq) (map[string]string, error) {
	ret := _m.Called(req)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(dto.UserLoginReq) map[string]string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.UserLoginReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginByFacebook provides a mock function with given fields: req
func (_m *UserService) LoginByFacebook(req dto.UserLoginReq) (map[string]string, error) {
	ret := _m.Called(req)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(dto.UserLoginReq) map[string]string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.UserLoginReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: userId
func (_m *UserService) Logout(userId string) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshSession provides a mock function with given fields: req
func (_m *UserService) RefreshSession(req dto.UserRefreshSession) (map[string]string, error) {
	ret := _m.Called(req)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(dto.UserRefreshSession) map[string]string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.UserRefreshSession) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: req
func (_m *UserService) Register(req dto.UserProfileReq) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.UserProfileReq) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestResetPassword provides a mock function with given fields: email
func (_m *UserService) RequestResetPassword(email string) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: req
func (_m *UserService) UpdateProfile(req dto.UserUpdateProfileReq) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.UserUpdateProfileReq) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVerifyEmail provides a mock function with given fields: userId
func (_m *UserService) UpdateVerifyEmail(userId string) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateResetPasswordSignature provides a mock function with given fields: session
func (_m *UserService) ValidateResetPasswordSignature(session *dto.ResetPasswordSession) (string, error) {
	ret := _m.Called(session)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dto.ResetPasswordSession) string); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.ResetPasswordSession) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateSession provides a mock function with given fields: sessionId, userId
func (_m *UserService) ValidateSession(sessionId string, userId string) error {
	ret := _m.Called(sessionId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(sessionId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateVerifyEmailSignature provides a mock function with given fields: session
func (_m *UserService) ValidateVerifyEmailSignature(session *dto.VerifyEmailSession) (string, error) {
	ret := _m.Called(session)

	var r0 string
	if rf, ok := ret.Get(0).(func(*dto.VerifyEmailSession) string); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.VerifyEmailSession) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
